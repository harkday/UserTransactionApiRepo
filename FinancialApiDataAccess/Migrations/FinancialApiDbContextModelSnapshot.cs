// <auto-generated />
using System;
using FinancialApiDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinancialApiDataAccess.Migrations
{
    [DbContext(typeof(FinancialApiDbContext))]
    partial class FinancialApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FinancialApiModel.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinancialApiModel.Models.UserTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditAccountNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditAccountUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebitAccountNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebitAccountUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Narration")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserTransactions");
                });

            modelBuilder.Entity("UserUserTransaction", b =>
                {
                    b.Property<long>("UserTransactionsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserTransactionsId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserUserTransaction");
                });

            modelBuilder.Entity("UserUserTransaction", b =>
                {
                    b.HasOne("FinancialApiModel.Models.UserTransaction", null)
                        .WithMany()
                        .HasForeignKey("UserTransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinancialApiModel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
